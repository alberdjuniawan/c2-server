// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "C2 Administrator",
            "email": "admin@example.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/agents": {
            "get": {
                "description": "Returns a list of all agents currently registered in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Retrieve all registered agents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Agent"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/database.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/agents/{agent_id}/update-meta": {
            "put": {
                "description": "Updates the tags and notes of an agent based on the provided agent ID.",
                "tags": [
                    "Admin - Agent Management"
                ],
                "summary": "Update agent tags and notes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Agent tags and notes",
                        "name": "update_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.UpdateTagsAndNotesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent tags and notes updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update agent information",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/agents/{id}": {
            "delete": {
                "description": "Permanently removes an agent from the system by its unique ID.",
                "tags": [
                    "Admin - Agents"
                ],
                "summary": "Delete an agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete agent",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/command/{agent_id}": {
            "get": {
                "description": "Retrieve command history for a given agent ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get all commands for an agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get commands",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/command/{agent_id}/send": {
            "post": {
                "description": "Queue a command to be executed by the specified agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Send a command to an agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Command payload",
                        "name": "command",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.CommandRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to send command",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/command/{id}": {
            "delete": {
                "description": "Remove a command entry if it is completed and has result",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Delete a completed command with result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Command ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Command deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Command cannot be deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Command not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete command",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/commands/{command_id}/download": {
            "get": {
                "description": "Decrypts the encrypted command result file and sends it to the admin as a downloadable file.",
                "tags": [
                    "Admin - Commands"
                ],
                "summary": "Download command result file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Command ID",
                        "name": "command_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Nonce for decryption",
                        "name": "nonce",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Decrypted command result file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid nonce",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No result found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to decrypt file",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/login": {
            "post": {
                "description": "Authenticates an admin based on the provided username and password and returns a JWT token.",
                "tags": [
                    "Admin - Authentication"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error or token generation error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/register": {
            "post": {
                "description": "Registers a new admin with the provided username and password.",
                "tags": [
                    "Admin - Authentication"
                ],
                "summary": "Register new admin",
                "parameters": [
                    {
                        "description": "New admin credentials",
                        "name": "register_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Admin registration success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error registering admin",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/agent/heartbeat": {
            "post": {
                "description": "Receives a heartbeat signal from the agent, updates the agent status, and checks for pending commands.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Heartbeat from agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token for the agent",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Heartbeat request body",
                        "name": "heartbeat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/agent.HeartbeatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Heartbeat response with agent status and pending command",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Missing or invalid token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/agent/register": {
            "post": {
                "description": "Registers a new agent with the provided hostname, OS, and architecture, and generates a token for the agent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register a new agent",
                "parameters": [
                    {
                        "description": "Agent registration details",
                        "name": "agent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/agent.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered agent with a generated token",
                        "schema": {
                            "$ref": "#/definitions/agent.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Agent already registered",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error during registration",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/agent/result": {
            "post": {
                "description": "This endpoint receives the result of a command executed by the agent, updates the corresponding command status, and stores the result in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Submit the result of a command executed by an agent",
                "parameters": [
                    {
                        "description": "Command result details",
                        "name": "result",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/agent.CommandResultRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully submitted the result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Command not found or already processed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/agent/upload": {
            "post": {
                "description": "This endpoint allows an agent to upload a file as the result of a command. The file is then encrypted before being stored on the server.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Upload and encrypt file result of a command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Command ID",
                        "name": "command_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File result",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File successfully uploaded and encrypted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin.CommandRequest": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                }
            }
        },
        "admin.LoginRequest": {
            "description": "The LoginRequest contains the credentials needed for admin login.",
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "admin.RegisterRequest": {
            "description": "The RegisterRequest contains the credentials needed to register a new admin.",
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "admin.UpdateTagsAndNotesRequest": {
            "type": "object",
            "properties": {
                "notes": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "agent.CommandResultRequest": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "ID of the agent submitting the result",
                    "type": "string"
                },
                "command": {
                    "description": "The command that was executed",
                    "type": "string"
                },
                "result": {
                    "description": "The result of the command execution",
                    "type": "string"
                }
            }
        },
        "agent.HeartbeatRequest": {
            "type": "object",
            "properties": {
                "ip_address": {
                    "description": "IP address of the agent",
                    "type": "string"
                },
                "last_seen": {
                    "description": "Timestamp of when the agent was last active",
                    "type": "string"
                }
            }
        },
        "agent.RegisterRequest": {
            "type": "object",
            "properties": {
                "arch": {
                    "description": "Architecture (e.g., x86, ARM) of the agent",
                    "type": "string"
                },
                "hostname": {
                    "description": "Hostname of the agent",
                    "type": "string"
                },
                "os": {
                    "description": "Operating system of the agent",
                    "type": "string"
                }
            }
        },
        "agent.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "A message indicating the result of the registration",
                    "type": "string"
                },
                "token": {
                    "description": "Token generated for the agent after successful registration",
                    "type": "string"
                }
            }
        },
        "database.Agent": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "last_seen": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "registered_at": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "database.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8443",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "C2 Server API",
	Description:      "API documentation for the C2 (Command and Control) server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
